import React, { Component, PropTypes } from 'react'
import firebase from 'firebase'
import firebaseui from 'firebaseui'
import 'firebaseui/dist/firebaseui.css'
import ee from 'event-emitter'
import async from 'async'

const emitter = ee({})
let ui = undefined

class FirebaseAuth extends Component {
  constructor(props) {
    super(props)
    this.onAuthStateChanged = this.onAuthStateChanged.bind(this)
  }
  onAuthStateChanged(user) {
    let { onAuthStateChanged } = this.props
    if(!onAuthStateChanged) return
    if(!user) return onAuthStateChanged(user)
    user.getToken().then(accessToken => {
      onAuthStateChanged({
        displayName: user.displayName,
        photoURL: user.photoURL,
        accessToken: accessToken
      })
    })
  }
  deleteCurrentUser() {
    return firebase.auth().currentUser.delete()
  }
  signOut() {
    return firebase.auth().signOut()
  }
  buildUI() {
    let { tosURL } = this.props
    ui.start('#firebase-auth-container', {
      callbacks: {
        signInSuccess: () => { return false }
      },
      signInFlow: 'popup',
      tosUrl: tosURL,
      signInOptions: [
        //firebase.auth.FacebookAuthProvider.PROVIDER_ID,
        //firebase.auth.TwitterAuthProvider.PROVIDER_ID,
        firebase.auth.GoogleAuthProvider.PROVIDER_ID
      ]
    })
  }
  componentDidMount() {
    let { apiKey, authDomain } = this.props
    if(!ui) {
      firebase.initializeApp({ apiKey: apiKey, authDomain: authDomain })
      ui = new firebaseui.auth.AuthUI(firebase.auth())
      firebase.auth().onAuthStateChanged(user => {
        emitter.emit('authstatechanged', user)
      })
    }
    emitter.on('authstatechanged', this.onAuthStateChanged)
    this.buildUI()
  }
  componentWillUnmount() {
    emitter.off('authstatechanged', this.onAuthStateChanged)
  }
  render() {
    return (<div id='firebase-auth-container'/>)
  }
}
FirebaseAuth.propTypes = {
}

export default FirebaseAuth
