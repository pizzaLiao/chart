import React, { Component, PropTypes } from 'react'
import {
  DeviceEventEmitter,
  TouchableHighlight,
  NativeModules,
  View,
  Text,
  requireNativeComponent
} from 'react-native'
import firebaseAuth from './FirebaseAuth'
import async from 'async'

const { FirebaseAuthModule } = NativeModules

class FirebaseAuth extends Component {
  constructor(props) {
    super(props)
    this.onPress = this.onPress.bind(this)
    this.onAuthStateChanged = this.onAuthStateChanged.bind(this)
  }
  onAuthStateChanged(user) {
    let { onAuthStateChanged } = this.props
    if(!onAuthStateChanged) return
    onAuthStateChanged(user)
  }
  onPress() {
    firebaseAuth.invokeGoogleAuth()
  }
  deleteCurrentUser() {
    return firebaseAuth.deleteCurrentUser()
  }
  signOut() {
    return firebaseAuth.signOut()
  }
  buildUI() {
    let { clientId, applicationId, apiKey, authDomain, tosURL } = this.props
    firebaseAuth.initialize({ clientId, applicationId, apiKey, authDomain, tosURL })
  }
  componentDidMount() {
    this.buildUI()
    this._onPress = DeviceEventEmitter.addListener('FirebaseAuthPress', this.onPress)
    this._onAuthStateChanged = DeviceEventEmitter.addListener('FirebaseAuthStateChange', this.onAuthStateChanged)
  }
  componentWillUnmount() {
    this._onPress && this._onPress.remove()
    this._onAuthStateChanged = this._onAuthStateChanged.remove()
  }
  render() {
    return (
      <NativeFirebaseAuth {...this.props} />
    )
  }
}
FirebaseAuth.propTypes = {
}

const NativeFirebaseAuth = requireNativeComponent('FirebaseAuth', FirebaseAuth, {nativeOnly: {
  ...View.propTypes
}})

module.exports = FirebaseAuth
