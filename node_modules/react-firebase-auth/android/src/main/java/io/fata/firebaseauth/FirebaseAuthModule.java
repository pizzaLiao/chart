package io.fata.firebaseauth;

import java.util.*;
import android.os.Bundle;
import android.util.Log;
import android.app.Activity;
import android.content.Intent;
import android.support.annotation.Nullable;
import android.support.annotation.NonNull;
import com.facebook.react.ReactActivity;
import com.facebook.react.bridge.*;
import com.facebook.react.modules.core.DeviceEventManagerModule;
import com.google.android.gms.auth.api.Auth;
import com.google.android.gms.auth.api.signin.GoogleSignInAccount;
import com.google.android.gms.auth.api.signin.GoogleSignInOptions;
import com.google.android.gms.auth.api.signin.GoogleSignInResult;
import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.api.GoogleApiClient;
import com.google.android.gms.common.api.ResultCallback;
import com.google.android.gms.common.api.Status;
import com.google.android.gms.tasks.OnCompleteListener;
import com.google.android.gms.tasks.Task;
import com.google.firebase.FirebaseApp;
import com.google.firebase.FirebaseOptions;
import com.google.firebase.auth.AuthCredential;
import com.google.firebase.auth.AuthResult;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.FirebaseUser;
import com.google.firebase.auth.GoogleAuthProvider;

public class FirebaseAuthModule
  extends ReactContextBaseJavaModule
  {

  private static final String TAG = "FirebaseAuthModule";
  private static final int RC_SIGN_IN = 9001;

  private ReactApplicationContext reactContext;
  private FirebaseAuth.AuthStateListener mAuthListener;
  private GoogleApiClient mGoogleApiClient;

  private final ActivityEventListener mActivityEventListener = new BaseActivityEventListener() {
    @Override
    public void onActivityResult(Activity activity, int requestCode, int resultCode, Intent data) {
      Log.d(TAG, "onActivityResult");
      if (requestCode == RC_SIGN_IN) {
        GoogleSignInResult result = Auth.GoogleSignInApi.getSignInResultFromIntent(data);
        if (result.isSuccess()) {
          // Google Sign In was successful, authenticate with Firebase
          GoogleSignInAccount account = result.getSignInAccount();
          firebaseAuthWithGoogle(account);
        }
      }
    }
  };

  public FirebaseAuthModule(ReactApplicationContext reactContext) {
    super(reactContext);
    this.reactContext = reactContext;
  }

  private void firebaseAuthWithGoogle(GoogleSignInAccount acct) {
    AuthCredential credential = GoogleAuthProvider.getCredential(acct.getIdToken(), null);
    FirebaseAuth.getInstance().signInWithCredential(credential);
  }

  @Override
  public String getName() {
    return TAG;
  }

  @ReactMethod
  public void initialize(ReadableMap config) {
    if(mAuthListener != null) return;

    reactContext.addActivityEventListener(mActivityEventListener);

    GoogleSignInOptions gso = new GoogleSignInOptions.Builder(GoogleSignInOptions.DEFAULT_SIGN_IN)
      .requestIdToken(config.getString("clientId"))
      .requestEmail()
      .build();

    mGoogleApiClient = new GoogleApiClient.Builder(reactContext)
      .addApi(Auth.GOOGLE_SIGN_IN_API, gso)
      .build();

    //FirebaseOptions options = new FirebaseOptions.Builder()
    //  .setApplicationId(config.getString("applicationId"))
    //  .setApiKey(config.getString("apiKey"))
    //  .build();
    //FirebaseApp.initializeApp(reactContext, options);

    mAuthListener = new FirebaseAuth.AuthStateListener() {
      @Override
      public void onAuthStateChanged(@NonNull FirebaseAuth firebaseAuth) {
        Log.d(TAG, "onAuthStateChanged");
        FirebaseUser user = firebaseAuth.getCurrentUser();
        if (user != null) {
          // User is signed in
          WritableMap resp = Arguments.createMap();
          resp.putString("uid", user.getUid());
          resp.putString("displayName", user.getDisplayName());
          resp.putString("email", user.getEmail());
          resp.putString("photoURL", user.getPhotoUrl().toString());
          resp.putString("providerId", user.getProviderId());
          resp.putString("accessToken", user.getToken(false).getResult().getToken());
          reactContext
            .getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class)
            .emit("FirebaseAuthStateChange", resp);
        } else {
          // User is signed out
          reactContext
            .getJSModule(DeviceEventManagerModule.RCTDeviceEventEmitter.class)
            .emit("FirebaseAuthChangeState", null);
        }
        // ...
      }
    };

    FirebaseAuth.getInstance().addAuthStateListener(mAuthListener);
  }

  @ReactMethod
  public void invokeGoogleAuth() {
    Activity currentActivity = getCurrentActivity();
    if(currentActivity == null) return;
    if(mGoogleApiClient == null) return;
    Intent signInIntent = Auth.GoogleSignInApi.getSignInIntent(mGoogleApiClient);
    currentActivity.startActivityForResult(signInIntent, RC_SIGN_IN);
  }

  @ReactMethod
  public void deleteCurrentUser(final Callback callback) {
    if(mAuthListener == null) {
      WritableMap resp = Arguments.createMap();
      resp.putString("description", "Not initialized");
      if(callback != null) callback.invoke(resp);
      return;
    }
    FirebaseUser user = FirebaseAuth.getInstance().getCurrentUser();
    if(user == null) {
      if(callback != null) callback.invoke();
      return;
    }
    user.delete()
      .addOnCompleteListener(new OnCompleteListener<Void>() {
        @Override
        public void onComplete(@NonNull Task<Void> task) {
          if (task.isSuccessful()) {
            Log.d(TAG, "User account deleted.");
            if(callback != null) callback.invoke();
          } else {
            WritableMap resp = Arguments.createMap();
            resp.putString("description", task.getException().getMessage());
            if(callback != null) callback.invoke(resp);
          }
        }
      });
  }

  @ReactMethod
  public void signOut(final Callback callback) {
    if(mAuthListener == null) {
      WritableMap resp = Arguments.createMap();
      resp.putString("description", "Not initialized");
      callback.invoke(resp);
      return;
    }
    mGoogleApiClient.connect();
    mGoogleApiClient.registerConnectionCallbacks(new GoogleApiClient.ConnectionCallbacks() {
      @Override
      public void onConnectionSuspended(int cause) {
        WritableMap resp = Arguments.createMap();
        resp.putString("description", "Connection suspended");
        if(callback != null) callback.invoke(resp);
      }
      @Override
      public void onConnected(@Nullable Bundle bundle) {
        FirebaseAuth.getInstance().signOut();
        Auth.GoogleSignInApi.revokeAccess(mGoogleApiClient).setResultCallback(
            new ResultCallback<Status>() {
              @Override
              public void onResult(@NonNull Status status) {
                Log.d(TAG, "User signed out");
                if(callback != null) callback.invoke();
              }
            });
      }
    });
  }

  //@Override
  //public void onConnectionFailed(ConnectionResult connectionResult) {
  //  // An unresolvable error has occurred and Google APIs (including Sign-In) will not
  //  // be available.
  //  Log.d(TAG, "onConnectionFailed:" + connectionResult);
  //}
}

